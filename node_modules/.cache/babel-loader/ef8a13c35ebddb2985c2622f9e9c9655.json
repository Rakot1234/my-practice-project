{"ast":null,"code":"'use strict';\n/**\n * BEM class name factory.\n *\n * @typedef {Function} BemCn\n * @param {String|Object} [elementOrMods] Element name or hash object with mods\n * @param {Object} [mods] Hash object with mods\n * @returns {String}\n */\n\n/**\n * Returns BEM class name factory.\n *\n * @param {String} componentName Block name\n * @returns {BemCn}\n */\n\nmodule.exports = function bem(componentName) {\n  return function (elementOrMods, mods) {\n    if (!elementOrMods) {\n      return componentName;\n    }\n\n    var element;\n\n    if (typeof elementOrMods === 'string') {\n      element = elementOrMods;\n    } else {\n      mods = elementOrMods;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (element && typeof element !== 'string') {\n        throw new Error('You must provide `element` as string');\n      }\n\n      if (mods && typeof mods !== 'object') {\n        throw new Error('You must provide `mods` as plain object');\n      }\n    }\n\n    var base = componentName;\n\n    if (element) {\n      base += '__' + element;\n    }\n\n    return base + (mods ? Object.keys(mods).reduce(function (result, name) {\n      var value = mods[name];\n\n      if (value) {\n        result += ' ' + (typeof value === 'boolean' ? base + '_' + name : base + '_' + name + '_' + value);\n      }\n\n      return result;\n    }, '') : '');\n  };\n};","map":null,"metadata":{},"sourceType":"script"}